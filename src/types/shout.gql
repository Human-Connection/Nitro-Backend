enum ShoutTypeEnum {
  Post
  Organization
  Project
}

type Mutation {
  "Shout the given Type and ID"
  shout(id: ID!, type: ShoutTypeEnum): Boolean! @cypher(statement: """
    MATCH (n {id: $id})<-[:WROTE]-(wu:User), (u:User {id: $cypherParams.currentUserId})
    WHERE $type IN labels(n) AND NOT wu.id = $cypherParams.currentUserId
    MERGE (u)-[r:SHOUTED]->(n)
    RETURN COUNT(r) > 0
  """)

  "Unshout the given Type and ID"
  unshout(id: ID!, type: ShoutTypeEnum): Boolean! @cypher(statement: """
    MATCH (:User {id: $cypherParams.currentUserId})-[r:SHOUTED]->(n {id: $id})
    WHERE $type IN labels(n)
    DELETE r
    RETURN COUNT(r) > 0
  """)
}

type User {
  shouted: [Post]! @relation(name: "SHOUTED", direction: "OUT")
  shoutedCount: Int! @cypher(statement: "MATCH (this)-[:SHOUTED]->(r:Post) WHERE NOT r.deleted = true AND NOT r.disabled = true RETURN COUNT(DISTINCT r)")
}
type Post {
  shoutedBy: [User]! @relation(name: "SHOUTED", direction: "IN")
  shoutedCount: Int! @cypher(statement: "MATCH (this)<-[:SHOUTED]-(r:User) WHERE NOT r.deleted = true AND NOT r.disabled = true RETURN COUNT(DISTINCT r)")

  "Has the currently logged in user shouted that post?"
  shoutedByCurrentUser: Boolean! @cypher(statement: """
    MATCH (this)<-[:SHOUTED]-(u:User {id: $cypherParams.currentUserId})
    RETURN COUNT(u) >= 1
  """)
}
